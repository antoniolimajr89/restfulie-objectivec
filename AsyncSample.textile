h1. Async Parser Sample

UserParser.h

<pre>
#import <Foundation/Foundation.h>
#import "User.h"

@protocol UserParserDelegate
-(void) addUsers:(NSArray*)users;
@end

@interface UserParser : NSObject {
	id<UserParserDelegate> _delegate;
	NSOperationQueue *_operationQueue;
}

@property (nonatomic, assign) id<UserParserDelegate> delegate;
@property (nonatomic, retain) NSOperationQueue *operationQueue;

#pragma mark Initializers
+(id) parserWithDelegate:(id)delegate;
-(id) initWithDelegate:(id)delegate;

#pragma mark User Parser methods
-(void) getUsers;

@end
</pre> 

UserParser.m
<pre>
#import "UserParser.h"
#import "Restfulie.h"
#import "User.h"

@implementation UserParser

@synthesize delegate = _delegate;
@synthesize operationQueue = _operationQueue;

+ (id) parserWithDelegate:(id)delegate {
	UserParser *p = [[UserParser alloc] initWithDelegate:delegate];
	return p;
}

- (id) initWithDelegate:(id)delegate {
	self.delegate = delegate;
	return self;
}

- (NSOperationQueue *)operationQueue {
	if (nil == _operationQueue) {
		_operationQueue = [[NSOperationQueue alloc] init];
		_operationQueue.maxConcurrentOperationCount = 1;
	}
	return _operationQueue;
}

- (void) toggleLoadingView {
	[UIApplication sharedApplication].networkActivityIndicatorVisible  = ![UIApplication sharedApplication].networkActivityIndicatorVisible;
}

- (void) getUsers {
	
	[self toggleLoadingView];
	SEL method = @selector(getUsersJob:);

	NSInvocationOperation *op = [[NSInvocationOperation alloc] initWithTarget:self selector:method object:nil];
	[self.operationQueue addOperation:op];
	[op release];

}

- (void) getUsersJob:(NSString *)uniqueName {
	
	Response *res = [[Restfulie at:@"http://localhost:8888/users"] get];
	NSArray *users = [res resourceWithClass:[User class]];
	
	[(id)[self delegate] performSelectorOnMainThread:@selector(addUsers:) withObject:users waitUntilDone:NO];
	[self toggleLoadingView];
}

@end
</pre> 

h1. View Controller Sample

UserListViewController.h

<pre>
#import <UIKit/UIKit.h>
#import "UserParser.h"

@interface UserListViewController : UITableViewController<UserParserDelegate> {

	UserParser *userParser;
	NSArray *users;
}

@property (nonatomic, retain) UserParser *userParser;
@property (nonatomic, retain) NSArray *users;

#pragma mark UserParserDelegate

-(void) addUsers:(NSArray*)usrs;

@end
</pre>

UserTableViewController.m
<pre>
//...

@synthesize userParser, users;

- (id) initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil {
	if ((self = [super initWithNibName:nibNameOrNil bundle:nibBundleOrNil])) {
		self.userParser = [UserParser parserWithDelegate:self];
	}
	return self;
}

- (void) viewDidLoad {
	[self.userParser getUsers];
}

- (void) addUsers:(NSArray*)usrs {
	self.users = usrs;
	[self.tableView reloadData];
}

- (void) dealloc {
	[self.users release];
	[self.userParser release];
	[super dealloc];
}

#pragma mark TableView implementations

//...
</pre>